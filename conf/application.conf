
appName = address-reputation-ingester
application.router = app.Routes
application.global = config.ApplicationGlobal

play.modules.enabled += "com.kenshoo.play.metrics.PlayModule"

play.http.requestHandler = "play.api.http.GlobalSettingsHttpRequestHandler"

ws.timeout.request = 70000  # 70 secs

# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The controllers below are the exceptions to this rule.

controllers {
  confidenceLevel = 300

  com.kenshoo.play.metrics.MetricsController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }
}

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
  extraMeasured = []
}

app {
  remote {
    server = "http://localhost/webdav"
    user = "OSData"
    pass = "ospw"
  }

  files {
    // if required, use a symlink during development
    downloadFolder = "$HOME/OSGB-AddressBasePremium/download"
    outputFolder   = "$HOME/OSGB-AddressBasePremium/output"
  }

  // Specify some size estimates for the off-heap memory allocation (measured in bytes)
  // These are only hints; the actual values used may be lesser or greater.
  chronicleMap {
    blpu {
      mapSize = 35000000
    }
    dpa {
      setSize = 35000000
    }
    street {
      mapSize = 1500000
    }
    streetDescriptor {
      mapSize = 1500000
    }
    postcode {
      mapSize = 3000000
    }
  }
}

# Default settings for authentication (regardless of app mode)
# Use PasswordHasher to set up new passwords when required.
basicAuthentication {
  enabled: true
  realm: "Local"
  username: admin
  // "password"
  password: "pNLdf8hz7+6OTtDHfudNjAOL/kUHdI8B"
  salt: "aDU0go5OMKt6rF9uPFbjWZaRjs9k8f+d"
}

elastic {
  # multiple clusters can be added using a + delimeter
  uri = "elasticsearch://localhost:9300"

  clustername = "address-reputation"

  # Set to true if you have a cluster of more than one node. It will create replicas for the in-use
  # indexes and wait for them to initialise. If you only have one node this will never go green so
  # set is-cluster=false in that case.
  is-cluster = false

  shards {
    test: 1
    abi: 3
    abp: 30
  }
}

uploadThrottle {
  period = 0 # seconds
  backoff = 0 # fraction in the range 0..1
}

# Settings Specific to Each Run-mode

Dev {
  auditing {
    enabled = false
    traceRequests = false
    consumer {
      baseUri {
        host = localhost
        port = 8100
      }
    }
  }
}


Test {
  auditing {
    enabled = false
    traceRequests = false
    consumer {
      baseUri {
        host = datastream.service
        port = 80
      }
    }
  }

  app {
    chronicleMap {
      blpu {
        mapSize = 50000
      }
      dpa {
        setSize = 50000
      }
      street {
        mapSize = 2000
      }
    }
  }

}


Prod {
  auditing {
    enabled = true
    traceRequests = true
    consumer {
      baseUri {
      host = datastream.service
      port = 80
      }
    }
  }

  basicAuthentication {
    //password: "..."
  }

  microservice {
    metrics {
      graphite {
        host = graphite
        port = 2003
        prefix = play.${appName}.
        enabled = true
      }
    }

    services {
//      auth {
//        host=auth.service
//        port=80
//      }

      datastream {
        host=datastream.service
        port=80
      }
    }
  }
}
